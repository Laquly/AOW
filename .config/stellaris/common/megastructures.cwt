types = {
	type[megastructure] = {
		path = "game/common/megastructures"
		file_extension = .txt
		subtype[base_level] = {
			placement_rules = {}
		}
		subtype[has_prereqs] = {
			prerequisites = {}
		}
		localisation = {
			name = "$"
			desc = "$_DESC"
			subtype[base_level] = {
				details = "$_MEGASTRUCTURE_DETAILS"
				## optional
				delayed_info = "$_CONSTRUCTION_INFO_DELAYED"
			}
		}
		images = {
			## optional
			portrait = portrait # <sprite>
		}
	}
}

megastructure = {
	entity = scalar # TODO entity suffixes

	## cardinality = 0..1
	rotate_to_center = bool
	## cardinality = 0..1
	scale_offset = bool

	## cardinality = 0..1
	construction_entity = scalar # TODO entity suffixes
	### to avoid z-fighting of consrucion entity with the base entity
	## cardinality = 0..1
	construction_scale = float
	## cardinality = 0..1
	portrait = <sprite>
	### default: yes
	## cardinality = 0..1
	place_entity_on_planet_plane = bool
	## cardinality = 0..1
	entity_offset = { x = float y = float }
	## cardinality = 0..1
	plane_offset = int
	## cardinality = 0..1
	construction_blocks_others = bool
	## cardinality = 0..1
	build_outside_gravity_well = bool
	### default: yes
	## cardinality = 0..1
	show_galactic_map_icon = bool
	### default: no
	## cardinality = 0..1
	hide_name = bool
	### default: yes
	## cardinality = 0..1
	show_in_outliner = bool
	## cardinality = 0..1
	bypass_type = <bypass>
	### also possible to use here upgrade_desc = hide, and localisations are not required in that case
	## cardinality = 0..1
	upgrade_desc = localisation
	### also possible to use here upgrade_desc = hide, and localisations are not required in that case
	## cardinality = 0..1
	upgrade_desc = hide
	## cardinality = 0..1
	upgrade_from = {
		## cardinality = 0..1
		<megastructure>
	}
	## cardinality = 0..1
	prerequisites = {
		## cardinality = 0..inf
		<technology>
	}
	subtype[has_prereqs] = {
		## cardinality = 0..1
		show_prereqs = bool
		## cardinality = 0..1
		prereq_name = localisation
	}
	## cardinality = 0..1
	## replace_scopes = { this = country root = country }
	potential = single_alias_right[trigger_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country }
	possible = single_alias_right[trigger_clause]
	## cardinality = 0..1
	build_time = int
	## cardinality = 0..1
	starbase = <starbase_level>

	### an extra trigger to allow scripted reasons to hide the megastructure. if defined both show_in_outliner and this trigger need to be true for the megastructure to show in the outliner. scope: megastructure
	## cardinality = 0..1
	## replace_scopes = { this = megastructure root = megastructure }
	outliner_trigger = single_alias_right[trigger_clause]

	## cardinality = 0..1
	custom_tooltip_requirements = localisation
	## cardinality = 0..1
	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	overlord_can_upgrade = bool

	### default = no; decides if the megastructure will mine the underlying resources if its on top of a planet/star
	## cardinality = 0..1
	use_planet_resource = bool

	## cardinality = 0..1
	scales_with_planet = bool
	## cardinality = 0..1
	is_ruined_orbital_ring = bool
	### accepts country modifiers
	## cardinality = 0..1
	## replace_scopes = { this = country root = country }
	country_modifier = {
		## cardinality = 0..1
		custom_tooltip = localisation
		## cardinality = 0..1
		show_only_custom_tooltip = bool
		## cardinality = 0..inf
		alias_name[modifier] = alias_match_left[modifier]
	}

	## cardinality = 0..1
	## replace_scopes = { this = ship root = ship }
	ship_modifier = single_alias_right[modifier_clause]

	## cardinality = 0..1
	## replace_scopes = { this = megastructure root = megastructure }
	station_modifier = single_alias_right[modifier_clause]

	## cardinality = 0..1
	placement_rules = {
		## cardinality = 0..inf
		alias_name[trigger] = alias_match_left[trigger]
		## replace_scopes = { this = planet root = planet }
		## cardinality = 0..1
		planet_possible = single_alias_right[trigger_clause]
	}
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country fromfrom = fleet }
	on_build_queued = single_alias_right[effect_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country fromfrom = fleet }
	on_build_unqueued = single_alias_right[effect_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country fromfrom = megastructure }
	on_build_start = single_alias_right[effect_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country }
	on_build_cancel = single_alias_right[effect_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country fromfrom = megastructure }
	on_build_complete = single_alias_right[effect_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country fromfrom = megastructure }
	ai_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	sensor_range = int
	## cardinality = 0..1
	hyperlane_range = int
	### the type of constructions that block (and are in turn blocked by) this construction, default: multi_stage_type
	## cardinality = 0..1
	construction_blocks_and_blocked_by = enum[megastructure_block_type]
	## cardinality = 0..1
	build_megastructure_no_cost_localization_key = localisation

	## cardinality = 0..1
	victory_score = int

	## cardinality = 0..1
	dismantle_cost = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}
	## cardinality = 0..1
	dismantle_time = int
	## cardinality = 0..1
	## replace_scopes = { this = megastructure root = megastructure from = country }
	dismantle_potential = single_alias_right[trigger_clause]
	## cardinality = 0..1
	## replace_scopes = { this = megastructure root = megastructure from = country }
	dismantle_possible = single_alias_right[trigger_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country fromfrom = megastructure }
	on_dismantle_start = single_alias_right[effect_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country fromfrom = megastructure }
	on_dismantle_cancel = single_alias_right[effect_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system from = country }
	on_dismantle_complete = single_alias_right[effect_clause]
}
